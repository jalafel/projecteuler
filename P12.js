/* ====== Problem 12 =================================== *
 *
 *   The sequence of triangle numbers is generated by adding the natural
 *   numbers. So the 7th triangle number would be
 *   1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *   Let us list the factors of the first seven triangle numbers:
 *
 *     1:  1
 *     3:  1,3
 *     6:  1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *
 *   We can see that 28 is the first triangle number to have over five divisors.
 *
 *   What is the value of the first triangle number to have over five hundred
 *   divisors?
 *
 * ========================================**/

const assert = require('assert');

var factorialArray = [[]];

Array.prototype.numberOfFactors = function(num) {

  for (var i = num; i > 0; i--) {
    if (num % i === 0)
      this.push(i);
  }

  return this.length;
}

function triangleDigits(max_dividend) {
  var dividend_array = [],
      tri_digit = 0,
      count = 0;

  while (max_dividend > dividend_array.numberOfFactors(tri_digit)) {
    dividend_array = [];
    count++;
    tri_digit += count;
  }

  return tri_digit;
}

function solution() {
  var answer = triangleDigits(500);
  console.log(`The solution to problem 12 is: ${answer}`);
}

solution();

assert.equal(triangleDigits(5), 28);

/* ====== Meta ========================================= *
 *
 *  Estimated time of completion: 20 minutes
 *
 *  Search engine used:
 *
 *  Concepts learned: This is such a brute force method.
 *  Trying to think of ways we could predict whether
 *  or not to check the factorial before looking to
 *  see its whole length. What is the intelligent method
 *  for this?
 *
 *  Additional notes:
 *
 * ========================================**/
