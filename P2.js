/* ====== Problem 2 =================================== *
 *
 *   Each new term in the Fibonacci sequence is generated by
 *   adding the previous two terms. By starting with 1 and 2,
 *   the first 10 terms will be:
 *
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 *   By considering the terms in the Fibonacci sequence whose values
 *   do not exceed four million, find the sum of the even-valued terms.
 *
 * ========================================**/

const MAX_VALUE = 4e6;

function fibonacciSequence(x, container) {
  // base case, if value exceeds 4e6
  if (nextValue(x) > MAX_VALUE)
    return;

  // recursive case:
  container.push(nextValue(x));
  fibonacciSequence(container.slice(-2, container.length), container);

  // return value
  return container;
}

function nextValue(x) {
  return x[0] + x[1];
}

function sumEvenValues(valueArray) {
  return valueArray.filter(function(a){
    return a % 2 === 0;
  }).reduce(function(a, b) {
    return a + b;
  }, 0);
}

function solution() {
  var value = fibonacciSequence([1, 2], [1, 2]);
  var answer = sumEvenValues(value);

  console.log(`The sum of all even numbers in the Fibonacci sequence
    under four million is: ${answer}`);
}

solution();

/* ====== Meta ========================================= *
 *
 *  Estimated time of completion: 25 minutes
 *  Search engine used: no
 *  Concepts learned: sequences
 *
 *  Additional notes: Not a very general way to do this.
 *  Ideally would not have the base case in the function
 *  parameters. Think of a way to make this cleaner.
 *
 * ========================================**/